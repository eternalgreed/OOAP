Эталон :
abstract class LinkedList<T>

  // конструктор
// постусловие: создан новый пустой список
  public LinkedList<T> LinkedList();

  // команды
// предусловие: список не пуст; 
// постусловие: курсор установлен на первый узел в списке
  public void head(); 

// предусловие: список не пуст; 
// постусловие: курсор установлен на последний узел в списке
  public void tail(); 

// предусловие: правее курсора есть элемент; 
// постусловие: курсор сдвинут на один узел вправо
  public void right(); 

// предусловие: список не пуст; 
// постусловие: следом за текущим узлом добавлен 
// новый узел с заданным значением
  public void put_right(T value); 

// предусловие: список не пуст; 
// постусловие: перед текущим узлом добавлен 
// новый узел с заданным значением
  public void put_left(T value); 

 // предусловие: список не пуст; 
// постусловие: текущий узел удалён, 
// курсор смещён к правому соседу, если он есть, 
// в противном случае курсор смещён к левому соседу,
// если он есть
  public void remove();

// постусловие: список очищен от всех элементов
  public void clear(); 

// постусловие: новый узел добавлен в хвост списка
  public void add_tail(T value); 

// постусловие: в списке удалены все узлы с заданным значением
  public void remove_all(T value);

// предусловие: список не пуст;
// постусловие: значение текущего узла заменено на новое
  public void replace(T value); 

// постусловие: курсор установлен на следующий узел 
// с искомым значением, если такой узел найден
  public void find(T value); 

  // запросы
  public T get(); // предусловие: список не пуст
  public bool is_head();
  public bool is_tail();
  public bool is_value();
  public int size();

  // запросы статусов (возможные значения статусов)
  public int get_head_status(); // успешно; список пуст
  public int get_tail_status(); // успешно; список пуст
  public int get_right_status(); // успешно; правее нету элемента
  public int get_put_right_status(); // успешно; список пуст
  public int get_put_left_status(); // успешно; список пуст
  public int get_remove_status(); // успешно; список пуст
  public int get_replace_status(); // успешно; список пуст
  public int get_find_status(); // следующий найден; 
                       // следующий не найден; список пуст
  public int get_get_status(); // успешно; список пуст


В целом abstract class LinkedList<T> реализован.
Присутствуют необходимые элементы: конструктор, команды, запросы, запросы статусов .
Подробнее
1)Конструктор:
Замечаний нет, реализован верно, постусловие описано верно.
2)Команды:
Отсутствуют команды для перемещения курсора, т.к. они были определены как чистые функции и соответственно, как запросы.
Следовательно, постусловия отсутствуют.
Это отсутствующие команды с пред и постусловиями:
// предусловие: список не пуст;
// постусловие: курсор установлен на первый узел в списке
  public void head();

// предусловие: список не пуст;
// постусловие: курсор установлен на последний узел в списке
  public void tail();

// предусловие: правее курсора есть элемент;
// постусловие: курсор сдвинут на один узел вправо
  public void right();

Далее, команды, с пред и пост условиями:
  public void put_right(T value);
  public void put_left(T value);
реализованы верно, пред и пост условия идентичны эталонному решению.
Команда public void remove() отсутствует вообще.
Команда   public void clear() написана верно с правильным постусловием
Команда   public void add_tail(T value) написана верно, постусловие не корректно в части того,
что новый узел добавлен в хвост списка а не как в решении -  «в список добавляется новое значение».
Команды:
 public void remove_all(T value) и public void replace(T value) написаны верно, пред и постусловия аналогичны эталонным.
Команда public void find(T value) описана верно, отсутствует постусловие.


Данные запросы:
1)public T get(); // предусловие: список не пуст
2)public bool is_head();
3)public bool is_tail();
4)public bool is_value();
5)public int size();
определены верно.

Запросы статусов. Из за того что команды по перемещению курсора не были определены как команды,
а как функции, в запросах статусов отсутствуют:
public int get_head_status(); // успешно; список пуст
public int get_right_status(); // успешно; правее нету элемента

В целом, нужно запомнить следующее: (далее из конспекта)
2) Запросы -- методы, которые вычисляют некоторое значение на основе своих аргументов
(и возможно, на основе значений каких-то скрытых атрибутов класса),
но не меняют значения никаких атрибутов класса (не меняют состояние класса).
По сути, это чистые функции, которым требуются предусловия.
3) Команды, которые никакое значение не вычисляют, но меняют значения атрибутов класса,
меняют состояние класса (возможно, на основе своих аргументов). Для команд требуются постусловия.

Функция возвращает только то значение, которое напрямую от неё требуется по спецификации.
Команды вообще никакого значения не возвращают.

Тогда, управление курсором это команды, т.к. они меняют значение атрибутов (курсора).
Ведь при выполнении, к примеру, команды right, курсор будет указывать на определенный узел,
т.е. его состояние изменится.
